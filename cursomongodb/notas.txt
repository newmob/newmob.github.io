Help
https://docs.mongodb.com/manual/reference/method/db.collection.find/

Server
------
mongod --dbpath C:\Users\c129426\Documents\GitHub\newmob.github.io\cursomongodb\db


Client
------
mongo
// cria tabela
db.createCollection("alunos")

// insere registros
db.alunos.insert({"nome":"Carla Pinatti Maximiano","data_nascimento": new Date(1970,12,30)})

db.alunos.insert(
{"nome" : "Julio",
"data_nascimento" : new Date(1972, 08, 30),
"curso" : {
    "nome" : "Medicina"
},
"habilidades" : [
        {
        "nome" : "inglês",
        "nível" : "avançado"
        }    
    ]
}
)

db.alunos.insert({
    "nome": "Felipe",
    "data_nascimento": new Date(1994, 02, 26),
    "notas": [10, 9, 4.5],
    "curso": {
        "nome": "Sistemas de informação"
    },
    "habilidades": [
        {
            "nome": "Inglês",
            "nível": "Avançado"
        }
    ] 
})

// query de todos registros
db.alunos.find()

// query com array formatado
db.alunos.find().pretty()

// query com condição
db.alunos.find({ "_id" : ObjectId("5c867823a11f5a9c7160a178")})

db.alunos.find({nome: "Paulo"}).pretty()

db.alunos.find({"habilidades.nome": "Inglês"}).pretty()

db.collection.find( { qty: { $gt: 4 } } )

db.alunos.find({"nome": "Felipe", "data_nascimento": new Date(1994, 02, 26)})

// remove registros
db.alunos.remove({"_id": ObjectId("5c867823a11f5a9c7160a178")})

// contador de registros
db.alunos.count()
db.alunos.count({"habilidades.nome": "Inglês"})

Logical Query Operators
db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )

db.alunos.find({$or:
    [
        {"curso.nome": "Sistemas de informação"},
        {"curso.nome": "Ciências da computação"}

    ]
 }).pretty()

 ou

db.alunos.find({"curso.nome": {$in:
    [
        "Sistemas de informação",
        "Ciências da computação"
    ]
}}).pretty()


db.alunos.find({"curso.nome" : { $in : ["Sistema de informação", "Medicina"] } })

// pesquisa com LIKE
db.alunos.find({"curso.nome": /PALAVRA/ })

// Update
// o primeiro parâmetro é o critério de busco (case sensitive)
// o segundo parâmetro é o que deve ser feito. Tem que indicar o campo com $set
// senão troca todo o conteúdo do registro.
// Por default faz a alteração só no primeiro registro encontrado.
// Para fazer o Update em todos os registro encontrados, utiliza "multi: true"
db.alunos.update(
    {"curso.nome" : "Sistemas de informação"},
    {
        $set: {
            "curso.nome": "Sistemas de Informação"
        }
    }, {
        multi: true
    }
)

db.alunos.update(
    {"curso.nome" : "Sistemas de informação"},
    {
        $set: {
            "curso.nome": /Sistemas/
        }
    }, {
        multi: true
    }
)

// Incluir um dado em um tipo array - PUSH
db.alunos.update(
    { "_id" : ObjectId("5c8692e4a11f5a9c7160a17d") },
    { $push: {notas: 8.3} }
)

db.alunos.update(
    { "_id" : ObjectId("5c8692e4a11f5a9c7160a17d") },
    { $push: {
        notas: { $each: [8.5, 3]}
        } }
)


db.alunos.update(
    {"_id" : ObjectId("5c867823a11f5a9c7160a178")},
    {
        $set: {
        "data_nascimento" : ISODate("1980-01-31T02:00:00Z"),
        "notas" : [
                10,
                9.9,
                9.9,
                9.8,
                9.5,
                5
        ],
        "curso" : {
                "nome" : "Sistemas de Informação"
        },
        "habilidades" : [
                {
                        "nome" : "Inglês",
                        "nível" : "Avançado"
                },
                {
                        "nome" : "Francês",
                        "nível" : "Avançado"
                }
        ]}            
    }, {
        multi: false
    }
)


db.alunos.update(
    {"nome": /Paulo/},
    { $push: {notas: 5.5} }, 
    { multi: false}
)

db.alunos.update(
    { "_id" : ObjectId("5c8692e4a11f5a9c7160a17d") },
    { $push: {
        notas: { $each: [8.5, 3]}
        } }
)

db.alunos.find({
    notas : { $gt : 5 }
})

db.alunos.insert({
    nome: "André",
    data_nascimento: new Date(1991,01,05),
    curso: {
        nome: "Matemática"
    },
    notas: [7,5,9,4.5]
})

db.alunos.insert({
    nome: "Lúcia",
    data_nascimento: new Date(1994,07,17),
    curso: {
        nome: "Matemática"
    },
    notas: [8,9.5,10]
})

// traz apenas um documento (registro)
db.alunos.findOne({
    notas : { $gt : 5 }
})

// lista classificada por ordem crescente por nome
db.alunos.find().sort({"nome":1})

// lista classificada por ordem decrescente por nome
db.alunos.find().sort({"nome":-1})

// limitado aos 3 primeiros
db.alunos.find().sort({"nome":1}).limit(3)

db.alunos.update(
    { "_id" : ObjectId("5c90f242fb71a56df2464f28") },
    { $set: {
                localizacao : {
                    endereco: "R. Vergueiro, 3185",
                    cidade: "São Paulo",
                    pais: "Brasil",
                    coordinates : [-23.588213, -46.632356],
                    type: "Point"
                }
            } 
    }
)


// importar arquivo de registros
mongoimport -c alunos --jsonArray < alunos.json

// pesquisa por próximidade geográfica
db.alunos.aggregate([
{
    $geoNear : {
        near : {
            coordinates: [-23.5640265, -46.6527128],
            type : "Point"
        },
        distanceField : "distancia.calculada",
        spherical : true
    }
}
])

db.alunos.createIndex({
    localizacao : "2dsphere"
})

// pula o primeiro registro e traz o 3 próximos
db.alunos.aggregate([
{
    $geoNear : {
        near : {
            coordinates: [-23.5640265, -46.6527128],
            type : "Point"
        },
        distanceField : "distancia.calculada",
        spherical : true,
        num : 4
    }
},
{ $skip :1 }
])
